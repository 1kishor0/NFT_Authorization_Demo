@page "/"
@rendermode InteractiveServer
@using System.Net.Http
@inject HttpClient _http
@using C1.Blazor.Input
@using C1.Blazor.Core
@using C1.Blazor.Calendar
@using C1.Blazor.DateTimeEditors
@using C1_Blazor_Demo_DotNet8.Models.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web 
@using System.ComponentModel.DataAnnotations
@using C1_Blazor_Demo_DotNet8.Models.ViewModels
@inject NavigationManager Navigation

<h3>Customer Form</h3>

<EditForm Model="@customer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group" style="display:none;">
                <label for="CustomerId">
                    Customer ID:
                    <small class="form-text text-muted">10 digit only</small>
                </label>
                <InputNumber id="CustomerId" @bind-Value="customer.CustomerId" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label for="CustomerSalutation">
                    Customer Salutation:
                    <small class="form-text text-muted">Mr/Mrs/Dr/Eng</small>
                </label>
                <InputText id="CustomerSalutation" @bind-Value="customer.CustomerSalutation" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerFirstName">Customer First Name:</label>
                <InputText id="CustomerFirstName" @bind-Value="customer.CustomerFirstName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerLastName">Customer Last Name:</label>
                <InputText id="CustomerLastName" @bind-Value="customer.CustomerLastName" class="form-control" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label for="CustomerShortName">Customer Short Name:</label>
                <InputText id="CustomerShortName" @bind-Value="customer.CustomerShortName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerMiddleName">Customer Middle Name:</label>
                <InputText id="CustomerMiddleName" @bind-Value="customer.CustomerMiddleName" class="form-control" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="MakeBy">
            Make By:
            <small class="form-text text-muted">User Name</small>
        </label>
        <InputText id="MakeBy" @bind-Value="customer.MakeBy" class="form-control" style="width: 150px;" />
        <ValidationMessage For="@(() => customer.MakeBy)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary mt-3">Submit</button>
        <button type="button" class="btn btn-secondary mt-3 ms-2" @onclick="HandleRefresh">Refresh</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @AlertClass mt-3" role="alert">
        @Message
    </div>
}


@code {
    private CustomerModel customer = new CustomerModel();
    private NftAuthLogModel obj_NftAuthLog = new NftAuthLogModel();
    private string Message;
    private string AlertClass;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await _http.PostAsJsonAsync("api/Dashboard/add_customer", customer);


            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                Message = result?.Message;
                AlertClass = "alert-success";
              
            }
            else
            {
                Message = "Failed to add customer.";
                AlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
            AlertClass = "alert-danger";
        }
    }

    private void HandleRefresh()
    {
        customer = new CustomerModel(); 
        obj_NftAuthLog = new NftAuthLogModel();
        Message = string.Empty; 
        AlertClass = string.Empty; 
    }
}